@inject IJSRuntime JS
@inject NavigationManager Nav

<div class="timelapse-card @(Timelapse.IsActive ? "active" : "")">
    <div class="card-header">
        <h3 class="card-title">@Timelapse.Name</h3>
        <div class="card-actions">
            @if (!Timelapse.IsActive && Timelapse.VideoFiles?.Count > 0)
            {
                <button @onclick="HandleRegenerate" class="icon-btn" title="Regenerate video">ðŸ”„</button>
            }
            @if (!Timelapse.IsActive)
            {
                <button @onclick="HandleDelete" class="icon-btn delete" title="Delete timelapse">ðŸ—‘</button>
            }
            @* Always show YouTube link/button if a URL is present so it's obvious even when MP4 tab is selected *@
            @if (!string.IsNullOrEmpty(Timelapse.YouTubeUrl))
            {
                <a href="@Timelapse.YouTubeUrl" class="icon-btn youtube" target="_blank" title="View on YouTube">ðŸŽ¬</a>
            }
        </div>
    </div>
    
    <div class="status-badge @(Timelapse.IsActive ? "active" : "stopped")">
        @(Timelapse.IsActive ? "RECORDING" : "STOPPED")
    </div>
    
    <div class="card-info">
        <div class="info-row">
            <span class="info-label">Frames:</span>
            <span class="info-value">@Timelapse.FrameCount</span>
        </div>
        <div class="info-row">
            <span class="info-label">Started:</span>
            <span class="info-value">@Timelapse.StartTime.ToLocalTime().ToString("g")</span>
        </div>
        @if (Timelapse.LastFrameTime.HasValue)
        {
            <div class="info-row">
                <span class="info-label">Last Frame:</span>
                <span class="info-value">@Timelapse.LastFrameTime.Value.ToLocalTime().ToString("g")</span>
            </div>
        }
    </div>
    
    <div class="card-buttons">
        @if (Timelapse.IsActive)
        {
            <button @onclick="HandleStop" class="btn btn-danger btn-block">Stop Recording</button>
        }
        else if (Timelapse.FrameCount > 0)
        {
            @if (Timelapse.VideoFiles?.Count > 0)
            {
                    <button @onclick="HandleUpload" class="btn btn-primary btn-block" disabled="@(IsProcessing || !string.IsNullOrEmpty(Timelapse.YouTubeUrl))">
                        @(IsProcessing ? "Uploading..." : "Upload to YouTube")
                    </button>
            }
            else
            {
                <button @onclick="HandleGenerate" class="btn btn-primary btn-block" disabled="@IsProcessing">
                    @(IsProcessing ? "Generating..." : "Generate Video")
                </button>
            }
        }
    </div>
    
    @if ((Timelapse.VideoFiles?.Count > 0) || !string.IsNullOrEmpty(Timelapse.YouTubeUrl))
    {
        <div class="card-media">
            @* Simple tab switcher between local MP4 and YouTube embed when both are available *@
            <div class="media-tabs">
                @if (Timelapse.VideoFiles?.Count > 0)
                {
                    <button class="tab-btn @(selectedTab == "video" ? "active" : "")" @onclick='() => SelectTab("video")'>MP4</button>
                }
                @if (!string.IsNullOrEmpty(Timelapse.YouTubeUrl))
                {
                    <button class="tab-btn @(selectedTab == "youtube" ? "active" : "")" @onclick='() => SelectTab("youtube")'>YouTube</button>
                }
            </div>

            <div class="media-area">
                @if (selectedTab == "video" && Timelapse.VideoFiles?.Count > 0)
                {
                    <div class="card-video">
                        <video controls preload="metadata" class="mini-player">
                            <source src="@($"/api/timelapses/{Uri.EscapeDataString(Timelapse.Name)}/frames/{Uri.EscapeDataString(Timelapse.VideoFiles[0])}")" type="video/mp4">
                            Your browser does not support the video tag.
                        </video>
                    </div>

                    @if (Timelapse.VideoFiles.Count > 1)
                    {
                        <div class="card-links">
                            @foreach (var video in Timelapse.VideoFiles)
                            {
                                <a href="@($"/api/timelapses/{Uri.EscapeDataString(Timelapse.Name)}/frames/{Uri.EscapeDataString(video)}")" 
                                   class="video-link" 
                                   target="_blank">
                                    ðŸ“¹ @video
                                </a>
                            }
                        </div>
                    }
                }

                @if (selectedTab == "youtube" && !string.IsNullOrEmpty(Timelapse.YouTubeUrl))
                {
                    <div class="card-youtube-embed">
                        @if (TryGetYouTubeId(Timelapse.YouTubeUrl, out var id))
                        {
                            <div class="youtube-embed-wrap">
                                @* Use embed parameters to reduce branding/related recommendations.
                                   Do NOT loop the video; instead enable JS API so we can detect ended and pause on the final frame. *@
                                <iframe id="@iframeId" width="100%" height="300" src="@($"https://www.youtube.com/embed/{id}?rel=0&modestbranding=1&controls=1&enablejsapi=1")" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
                            </div>
                        }
                        else
                        {
                            <a href="@Timelapse.YouTubeUrl" class="youtube-link" target="_blank">ðŸŽ¬ View on YouTube</a>
                        }
                    </div>
                }
            </div>
        </div>
    }
</div>

<style>
    .timelapse-card {
        background: #1e1e1e;
        border-radius: 8px;
        padding: 16px;
        display: flex;
        flex-direction: column;
        gap: 12px;
        border: 1px solid #3a3a3a;
        transition: all 0.3s ease;
    }
    
    .timelapse-card.active {
        border-color: #f00;
        box-shadow: 0 0 10px rgba(255, 0, 0, 0.3);
    }
    
    .card-header {
        display: flex;
        align-items: flex-start;
        justify-content: space-between;
        gap: 8px;
        min-height: 28px;
    }
    
    .card-title {
        margin: 0;
        flex: 1;
        font-size: 1.1em;
        font-weight: 600;
        word-wrap: break-word;
        overflow-wrap: break-word;
        color: #fff;
        min-width: 0;
        overflow: hidden;
        text-overflow: ellipsis;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        line-height: 1.3;
    }
    
    .card-actions {
        display: flex;
        gap: 4px;
        flex-shrink: 0;
        align-self: flex-start;
    }
    
    .icon-btn {
        background: #3a3a3a;
        border: none;
        border-radius: 6px;
        padding: 6px 10px;
        cursor: pointer;
        font-size: 1.1em;
        transition: all 0.2s ease;
        color: #fff;
    }
    
    .icon-btn:hover {
        background: #4a4a4a;
        transform: scale(1.05);
    }
    
    .icon-btn.delete:hover {
        background: #dc3545;
    }
    
    .status-badge {
        padding: 4px 12px;
        border-radius: 4px;
        font-size: 0.85em;
        font-weight: 700;
        display: inline-block;
        width: fit-content;
    }
    
    .status-badge.active {
        background: #f00;
        color: #fff;
    }
    
    .status-badge.stopped {
        background: #444;
        color: #aaa;
    }
    
    .card-info {
        display: flex;
        flex-direction: column;
        gap: 6px;
    }
    
    .info-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 8px;
    }
    
    .info-label {
        font-weight: 600;
        color: #aaa;
        font-size: 0.9em;
    }
    
    .info-value {
        color: #fff;
        font-size: 0.9em;
        text-align: right;
    }
    
    .card-buttons {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }
    
    .btn {
        padding: 10px 16px;
        border: none;
        border-radius: 4px;
        font-size: 0.95em;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.2s ease;
    }
    
    .btn:hover:not(:disabled) {
        filter: brightness(1.2);
        transform: translateY(-1px);
    }
    
    .btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }
    
    .btn-primary {
        background: #007bff;
        color: #fff;
    }
    
    .btn-danger {
        background: #dc3545;
        color: #fff;
    }
    
    .btn-block {
        width: 100%;
    }
    
    .card-video {
        padding-top: 8px;
        border-top: 1px solid #3a3a3a;
    }
    
    .mini-player {
        width: 100%;
        border-radius: 4px;
        background: #000;
        max-height: 300px;
    }
    
    .card-links {
        display: flex;
        flex-direction: column;
        gap: 6px;
        padding-top: 8px;
        border-top: 1px solid #3a3a3a;
    }
    
    .video-link {
        color: #66ccff;
        text-decoration: none;
        font-size: 0.9em;
        padding: 4px 0;
        transition: color 0.2s ease;
    }
    
    .video-link:hover {
        color: #99ddff;
        text-decoration: underline;
    }
    
    .card-youtube {
        padding-top: 8px;
        border-top: 1px solid #3a3a3a;
    }
    
    .youtube-link {
        color: #ff0000;
        text-decoration: none;
        font-size: 0.95em;
        font-weight: 600;
        display: inline-flex;
        align-items: center;
        gap: 6px;
        transition: all 0.2s ease;
    }
    
    .youtube-link:hover {
        color: #ff4444;
        text-decoration: underline;
    }
</style>

@code {
    [Parameter, EditorRequired]
    public TimelapseInfo Timelapse { get; set; } = null!;

    [Parameter, EditorRequired]
    public bool IsProcessing { get; set; }

    [Parameter]
    public EventCallback<string> OnStop { get; set; }

    [Parameter]
    public EventCallback<string> OnGenerate { get; set; }

    [Parameter]
    public EventCallback<string> OnRegenerate { get; set; }

    [Parameter]
    public EventCallback<string> OnUpload { get; set; }

    [Parameter]
    public EventCallback<string> OnDelete { get; set; }

    private Task HandleStop() => OnStop.InvokeAsync(Timelapse.Name);
    private Task HandleGenerate() => OnGenerate.InvokeAsync(Timelapse.Name);
    private Task HandleRegenerate() => OnRegenerate.InvokeAsync(Timelapse.Name);
    private Task HandleUpload() => OnUpload.InvokeAsync(Timelapse.Name);
    private Task HandleDelete() => OnDelete.InvokeAsync(Timelapse.Name);

    // UI state for media tab selection (video | youtube)
    private string selectedTab = "video";

    protected override void OnParametersSet()
    {
        // Default tab: prefer YouTube when a URL is available; otherwise prefer local MP4
        if (!string.IsNullOrEmpty(Timelapse?.YouTubeUrl))
        {
            selectedTab = "youtube";
        }
        else if (Timelapse?.VideoFiles != null && Timelapse.VideoFiles.Count > 0)
        {
            selectedTab = "video";
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        // If the server-side list didn't include a YouTube URL, attempt to fetch metadata for this timelapse
        try
        {
            if (string.IsNullOrEmpty(Timelapse?.YouTubeUrl))
            {
                using var client = new HttpClient { BaseAddress = new Uri(Nav.BaseUri) };
                var name = Timelapse?.Name ?? string.Empty;
                var resp = await client.GetFromJsonAsync<MetadataResponse>($"api/timelapses/{Uri.EscapeDataString(name)}/metadata");
                if (resp?.YoutubeUrl is string y && !string.IsNullOrEmpty(y) && Timelapse != null)
                {
                    Timelapse.YouTubeUrl = y;
                    // Ensure the JS registration occurs again for the new iframe
                    _youtubeHandlerRegistered = false;
                    StateHasChanged();
                }
            }
        }
        catch { }
    }

    // unique id used for the iframe so JS can target it
    private string iframeId => "yt-" + System.Text.RegularExpressions.Regex.Replace(Timelapse?.Name ?? "timelapse", "\\W+", "-").ToLowerInvariant();
    private bool _youtubeHandlerRegistered = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // When the YouTube tab is active, register a small JS handler to pause the player on ended
        if (!string.IsNullOrEmpty(Timelapse?.YouTubeUrl) && selectedTab == "youtube" && !_youtubeHandlerRegistered)
        {
            try
            {
                await JS.InvokeVoidAsync("printstreamer.registerYoutubeEndHandler", iframeId);
                _youtubeHandlerRegistered = true;
            }
            catch { /* best-effort */ }
        }
    }

    private void SelectTab(string tab)
    {
        if (string.IsNullOrEmpty(tab)) return;
        selectedTab = tab;
    }

    private static bool TryGetYouTubeId(string url, out string id)
    {
        id = string.Empty;
        if (string.IsNullOrWhiteSpace(url)) return false;
        try
        {
            // Common YouTube URL patterns
            var uri = new Uri(url);
            if (uri.Host.Contains("youtube", StringComparison.OrdinalIgnoreCase))
            {
                var q = System.Web.HttpUtility.ParseQueryString(uri.Query);
                var v = q.Get("v");
                if (!string.IsNullOrEmpty(v)) { id = v; return true; }
                // path like /watch?v=... handled above; otherwise possible /embed/{id} or /v/{id}
                var segments = uri.Segments.Select(s => s.Trim('/')).Where(s => !string.IsNullOrEmpty(s)).ToArray();
                if (segments.Length > 0)
                {
                    var last = segments.Last();
                    // embed/ID or v/ID
                    if (segments.Length >= 2 && (segments[segments.Length - 2].Equals("embed", StringComparison.OrdinalIgnoreCase) || segments[segments.Length - 2].Equals("v", StringComparison.OrdinalIgnoreCase)))
                    {
                        id = last; return true;
                    }
                }
            }
            // youtu.be short url
            if (uri.Host.Equals("youtu.be", StringComparison.OrdinalIgnoreCase))
            {
                var seg = uri.Segments.Select(s => s.Trim('/')).Where(s => !string.IsNullOrEmpty(s)).ToArray();
                if (seg.Length > 0) { id = seg[0]; return true; }
            }
        }
        catch { }
        return false;
    }
    private class MetadataResponse
    {
        public bool Success { get; set; }
        public string? YoutubeUrl { get; set; }
        public string? CreatedAt { get; set; }
        public string? Error { get; set; }
    }
}
